JS is a single threaded language - it can do one thing at a time, it can execute one piece of code at a time

what event loop does it - it pushes the function from task queue to stack, seeing if the stack is empty, and then the stack executes the function
event loop has to wait until the stack is clear before it can push the callback on to the stack from the task queue

the V8 chrome engine have all these things - task queue, stack(function execution), console, heap (memory allocation) and Web APIs - which contains all the other apis like DOM, ajax, setTimeOut etc/.

when people say don't block the event loop. it means the constant rendering part is being rendering via the task queue(callback queue), and when you add sluggish code - image processing and animations - then get into the stack and for that time the event loop is blocked, preventing smooth rendering - browser can't do what it needs to do, create a nice fluid UI - so be careful about how you queue up the code



NODE

it was impossible to write any program that was not a website using a JavaScript. Node brought JS out of the browser-land - allowing it to accomplish what other server-side languages
So basically node allows you to run JS on a machine or a server without having to go thru web browser.

So how Node brings JS out of browser-land is - our chrome browser uses a V8 runtime engine made by google, which compiles JS code to machine level code so that our machines can understand the JS code - so node wraps up this V8 engine inside itself and hence using node we can write JS without writing it in browser and now in our machines and servers.

To facilitate this, Node has some added functionality that is not found in browser-based JavaScript, such as the ability to read and write local files, create http connections, connect and interact to a database and listen to network requests.

Back to the definition from Node’s website: Node is an asynchronous event driven JavaScript runtime.



WEB SERVER
Must read - [https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Client-Server_overview]



STATIC SITE
A static site is one that returns the same hard coded content from the server whenever a particular resource is requested. So for example if you have a page about a product at /static/myproduct1.html, this same page will be returned to every user. If you add another similar product to your site you will need to add another page (e.g. myproduct2.html) and so on. This can start to get really inefficient — what happens when you get to thousands of product pages? You would repeat a lot of code across each page (the basic page template, structure, etc.), and if you wanted to change anything about the page structure — like add a new "related products" section for example — then you'd have to change every page individually.

The server for a static site will only ever need to process GET requests, because the server doesn't store any modifiable data. It also doesn't change its responses based on HTTP Request data (e.g. URL parameters or cookies).



DYNAMIC SITE

1. The web browser creates an HTTP GET request to the server using the base URL for the resource (/best) and encoding the team and player number either as URL parameters (e.g. /best?team=my_team_name&show=11) or as part of the URL pattern (e.g. /best/my_team_name/11/). A GET request is used because the request is only fetching data (not modifying data).

2. The Web Server detects that the request is "dynamic" and forwards it to the Web Application for processing (the web server determines how to handle different URLs based on pattern matching rules defined in its configuration).

3. The Web Application identifies that the intention of the request is to get the "best team list" based on the URL (/best/) and finds out the required team name and number of players from the URL. The Web Application then gets the required information from the database (using additional "internal" parameters to define which players are "best", and possibly also getting the identity of the logged in coach from a client-side cookie).

4. The Web Application dynamically creates an HTML page by putting the data (from the Database) into placeholders inside an HTML template.

5. The Web Application returns the generated HTML to the web browser (via the Web Server), along with an HTTP status code of 200 ("success"). If anything prevents the HTML from being returned then the Web Application will return another code — for example "404" to indicate that the team does not exist.

6. The Web Browser will then start to process the returned HTML, sending separate requests to get any other CSS or JavaScript files that it references (see step 7).

7. The Web Server loads static files from the file system and returns them to the browser directly (again, correct file handling is based on configuration rules and URL pattern matching).



NPM
npm is the standard package manager for Node.js.
it manages downloads of dependencies of your project

--save-dev installs and adds the entry to the package.json file devDependencies

Shorthands of the flags can also be used:
-S: --save
-D: --save-dev
-O: --save-optional

The difference between devDependencies and dependencies is that the former contains development tools, like a testing library, while the latter is bundled with the app in production.



**good resource to study about package.json file - [https://github.com/nodejs/nodejs.dev/blob/aa4239e87a5adc992fdb709c20aebb5f6da77f86/content/learn/node-js-package-manager/package-json.en.md]



**  Consider modules to be the same as JavaScript libraries.
    A set of functions you want to include in your application.



LOCAL VS GLOBAL NPM PACKAGES
The main difference between local and global packages is this:

- local packages are installed in the directory where you run npm install <package-name>, and they are put in the node_modules folder under this directory
- global packages are all put in a single place in your system (exactly where depends on your setup), regardless of where you run npm install -g <package-name>

In general, all packages should be installed locally.

This makes sure you can have dozens of applications in your computer, all running a different version of each package if needed.

Updating a global package would make all your projects use the new release, and as you can imagine this might cause nightmares in terms of maintenance, as some packages might break compatibility with further dependencies, and so on.

All projects have their own local version of a package, even if this might appear like a waste of resources, it's minimal compared to the possible negative consequences.

A package should be installed globally when it provides an executable command that you run from the shell (CLI), and it's reused across projects.

You can also install executable commands locally and run them using npx, but some packages are just better installed globally.

Great examples of popular global packages which you might know are

    npm
    vue-cli
    grunt-cli
    mocha
    react-native-cli
    gatsby-cli
    forever
    nodemon

You probably have some packages installed globally already on your system. You can see them by running:
        npm list -g --depth 0



** If we do const xyz = require('xyz')
it means we are not installing any new dependencies but we are just importing it and the 'xyz' is core module already present that came with nodejs 



**NODE's edge over PHP or ASP is its nature of asynchronous programming:

A common task for a web server can be to open a file on the server and return the content to the client.

- Here is how PHP or ASP handles a file request:

Sends the task to the computer's file system.
Waits while the file system opens and reads the file.
Returns the content to the client.
Ready to handle the next request.


- Here is how Node.js handles a file request:

Sends the task to the computer's file system.
Ready to handle the next request.
When the file system has opened and read the file, the server returns the content to the client.

Node.js eliminates the waiting, and simply continues with the next request.
Node.js runs single-threaded, non-blocking, asynchronous programming, which is very memory efficient.